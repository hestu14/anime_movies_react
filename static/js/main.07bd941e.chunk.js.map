{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["require","config","App","state","DataMovies","Header_title","Header_subtitle","axios","get","process","DB_API_KEY","then","response","console","log","data","setState","results","name","description","catch","error","data_kolom","this","map","item","index","id_title","title","id_original_title","original_title","id_film_rating","vote_average","id_film_rating_count","vote_count","id_url_movies","id","id_image","poster_path","className","key","src","alt","onClick","window","open","header_title","header_subtitle","href","target","rel","height","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gTAIAA,EAAQ,IAAUC,S,IAgGHC,E,kDA3Fb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,WAAY,GACZC,aAAc,GACdC,gBAAiB,IALP,E,gEAWO,IAAD,OAClBC,IAAMC,IAAI,oDAAsDC,wJAAYC,WAAa,UAAW,CAClG,OAAS,EACT,aAAe,EACf,OAAU,MACV,QAAW,CACT,eAAgB,iCAChB,cAAiB,8NAEnB,aAAe,EACf,KAAQ,OACPC,MAAK,SAACC,GACPC,QAAQC,IAAIF,EAASG,MACrB,EAAKC,SAAS,CACZZ,WAAYQ,EAASG,KAAKE,QAC1BZ,aAAcO,EAASG,KAAKG,KAC5BZ,gBAAiBM,EAASG,KAAKI,iBAGhCC,OAAM,SAAAC,GACLR,QAAQC,IAAIO,EAAMT,e,+BAMtB,IAAMU,EAAaC,KAAKpB,MAAMC,WAAWoB,KAAI,SAACC,EAAMC,GAElD,IAAIC,EAAWF,EAAKG,MAChBC,EAAoBJ,EAAKK,eACzBC,EAAiBN,EAAKO,aACtBC,EAAuBR,EAAKS,WAE5BC,EAAgBV,EAAKW,GAErBC,EADc,mCACSZ,EAAKa,YAEhC,OAAO,yBAAKC,UAAU,MAAMC,IAAKd,GAC7B,yBAAKa,UAAU,YACb,yBAAKH,GAAG,aADV,IACwB,yBAAKK,IAAKJ,EAAUK,IAAI,cAAcC,QAAS,kBAAMC,OAAOC,KAPtE,oCAOyFV,EAAe,cAEtH,yBAAKI,UAAU,0BACb,yBAAKH,GAAG,QAAR,IAAiBT,EAAjB,KACA,yBAAKS,GAAG,uBAAR,IAAgCP,EAAhC,KACA,yBAAKO,GAAG,eAAR,YAAgCL,EAAhC,KAAkDE,EAAlD,sBAKFa,EAAevB,KAAKpB,MAAME,aAC1B0C,EAAkBxB,KAAKpB,MAAMG,gBAEnC,OACE,6BACE,yBAAKiC,UAAU,8BACb,yBAAKA,UAAU,6BACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAY,0BAAMH,GAAG,cAAnC,IAAmDU,EAAnD,KACA,uBAAGP,UAAU,OAAOH,GAAG,oBAAvB,IAA4CW,MAKlD,yBAAKR,UAAU,aAEdjB,GAID,4BAAQc,GAAG,gBAAgBG,UAAU,+BACnC,yBAAKA,UAAU,yBACb,iDAAsB,uBAAGS,KAAK,6BAA6BC,OAAO,SAASC,IAAI,uBAC7E,yBAAKR,IAAI,YAAYD,IAAI,kIAAkIU,OAAQ,c,GArF/JC,aCKEC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEd9C,OAAM,SAAAC,GACLR,QAAQQ,MAAMA,EAAM8C,c","file":"static/js/main.07bd941e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './component/App.css';\n\nrequire('dotenv').config()\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      DataMovies: [],\n      Header_title: \"\",\n      Header_subtitle: \"\",\n    };\n  }\n\n  // 'https://api.themoviedb.org/3/search/movie?api_key=' + process.env.DB_API_KEY + '&query=SEARCHQUERY&page=1'\n\n  componentDidMount() {\n    axios.get('https://api.themoviedb.org/4/list/143529?api_key=' + process.env.DB_API_KEY + '&page=1', {\n      \"async\": true,\n      \"crossDomain\": true,\n      \"method\": \"GET\",\n      \"headers\": {\n        \"content-type\": \"application/json;charset=utf-8\",\n        \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3ZGUxM2FlZGU0MWUwZTE3YTQxMDRmZmNhNzMzMjNkYSIsInN1YiI6IjVlYzc0ZmFiZDIxNDdjMDAyM2JlYjA5YiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.JCgsMXm5wbYGA6lcd7_Yq970YK-HZEsyec87wgiF-9c\"\n      },\n      \"processData\": false,\n      \"data\": \"{}\"\n    }).then((response) => {\n      console.log(response.data);\n      this.setState({\n        DataMovies: response.data.results,\n        Header_title: response.data.name,\n        Header_subtitle: response.data.description\n      })\n    })\n      .catch(error => {\n        console.log(error.response)\n      });\n  }\n\n\n  render() {\n    const data_kolom = this.state.DataMovies.map((item, index) => {\n\n      var id_title = item.title;\n      var id_original_title = item.original_title;\n      var id_film_rating = item.vote_average;\n      var id_film_rating_count = item.vote_count;\n      var url_default = \"https://www.themoviedb.org/movie/\";\n      var id_url_movies = item.id;\n      var img_default = \"https://image.tmdb.org/t/p/w500/\";\n      var id_image = img_default+item.poster_path;\n      \n      return <div className=\"row\" key={index}>\n          <div className=\"col-sm-4\">\n            <div id=\"film_img\" /> <img src={id_image} alt=\"film_poster\" onClick={() => window.open(url_default + id_url_movies, \"_blank\")}></img>\n          </div>\n          <div className=\"col-sm-8 col-film-info\">\n            <div id=\"film\"> {id_title} </div>\n            <div id=\"film_original_title\"> {id_original_title} </div>\n            <div id=\"film_rating\"> Rating: {id_film_rating} ({id_film_rating_count} users vote) </div> \n          </div>\n        </div>;\n    })\n\n    const header_title = this.state.Header_title;\n    const header_subtitle = this.state.Header_subtitle;\n\n    return (\n      <div>\n        <div className=\"container container-header\">\n          <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n              <h1 className=\"display-4\"><span id=\"deskripsi\" /> {header_title} </h1>\n              <p className=\"lead\" id=\"deskripsi_header\"> {header_subtitle}\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"container\">\n\n        {data_kolom}\n\n\n        </div>\n        <footer id=\"sticky-footer\" className=\"py-4 bg-light text-white-50\">\n          <div className=\"container text-center\">\n            <small>Sponsored by : <a href=\"https://www.themoviedb.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n              <img alt=\"tmdb_logo\" src=\"https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg\" height={11} />\n            </a></small>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}